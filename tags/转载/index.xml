<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>转载 on Korman的个人博客</title>
    <link>http://korman.github.io/tags/%E8%BD%AC%E8%BD%BD/</link>
    <description>Recent content in 转载 on Korman的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 21 Sep 2020 15:12:10 +0800</lastBuildDate>
    
	<atom:link href="http://korman.github.io/tags/%E8%BD%AC%E8%BD%BD/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[转载]Debian 9基于azerothcore Wotlk搭建魔兽世界私服</title>
      <link>http://korman.github.io/post/cpp/debian-9%E5%9F%BA%E4%BA%8Eazerothcore-wotlk%E6%90%AD%E5%BB%BA%E9%AD%94%E5%85%BD%E4%B8%96%E7%95%8C%E7%A7%81%E6%9C%8D/</link>
      <pubDate>Mon, 21 Sep 2020 15:12:10 +0800</pubDate>
      
      <guid>http://korman.github.io/post/cpp/debian-9%E5%9F%BA%E4%BA%8Eazerothcore-wotlk%E6%90%AD%E5%BB%BA%E9%AD%94%E5%85%BD%E4%B8%96%E7%95%8C%E7%A7%81%E6%9C%8D/</guid>
      <description>电脑硬件要求 CPU双核以上，内存2G以上，交换分区4G以上，硬盘20G以上。 编译服务器程序 $ sudo apt-get install git cmake make gcc g++ clang libmariadbclient-dev libssl-dev libbz2-dev libreadline-dev libncurses-dev mariadb-server libace-6.* libace-dev $ git clone https://github.com/azerothcore/azerothcore-wotlk.git azerothcore $ cd azerothcore $ mkdir build $ cd build $ mkdir -p /home/$USER/azeroth-server $ cmake ../ -DCMAKE_INSTALL_PREFIX=/home/$USER/azeroth-server/ -DTOOLS=0 -DSCRIPTS=1 $ make -j 2 $ make install 如果需要幻化师，还需要在编译之前加入 $ cd azerothcore/modules $ git clone https://github.com/azerothcore/mod-transmog.git 修改配置文件 $ cd /home/$USER/azeroth-server/etc $ cp authserver.conf.dist authserver.conf $ cp worldserver.conf.dist worldserver.conf 修改au</description>
    </item>
    
    <item>
      <title>[转载]go微服务框架go-micro深度学习(五)</title>
      <link>http://korman.github.io/post/golang/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6go-micro%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A05/</link>
      <pubDate>Sat, 19 Sep 2020 13:16:15 +0800</pubDate>
      
      <guid>http://korman.github.io/post/golang/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6go-micro%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A05/</guid>
      <description>介绍 github 例子地址 上一篇写了一下rpc调用过程的实现方式，简单来说就是服务端把实现了接口的结构体对象进行反射，抽取方法，签名，保存，客户端调用的时候go-micro封请求数据，服务端接收到请求时，找到需要调用调用的对象和对应的方法，利用反射进行调用，返回数据。 但是没有说stream的</description>
    </item>
    
    <item>
      <title>[转载]go微服务框架go-micro深度学习(四)</title>
      <link>http://korman.github.io/post/golang/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6go-micro%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A04/</link>
      <pubDate>Sat, 19 Sep 2020 13:16:13 +0800</pubDate>
      
      <guid>http://korman.github.io/post/golang/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6go-micro%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A04/</guid>
      <description>上一篇帖介绍 上一篇帖子go微服务框架go-micro深度学习(三) Registry服务的注册和发现详细解释了go-micro是如何做服务注册和发现在，服务端注册server信息，client获取server的地址信息，就可以和服务建立连接，然后就可以进行通信了。这篇帖子详细说一下</description>
    </item>
    
    <item>
      <title>[转载]go微服务框架go-micro深度学习(三)</title>
      <link>http://korman.github.io/post/golang/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6go-micro%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A03/</link>
      <pubDate>Sat, 19 Sep 2020 13:16:10 +0800</pubDate>
      
      <guid>http://korman.github.io/post/golang/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6go-micro%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A03/</guid>
      <description>服务的注册与发现 服务的注册与发现是微服务必不可少的功能，这样系统才能有更高的性能，更高的可用性。go-micro框架的服务发现有自己能用的接口Registry。只要实现这个接口就可以定制自己的服务注册和发现。 go-micro在客户端做的负载，典型的Balancing-aware C</description>
    </item>
    
    <item>
      <title>[转载]go微服务框架go-micro深度学习(二)</title>
      <link>http://korman.github.io/post/golang/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6go-micro%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A02/</link>
      <pubDate>Sat, 19 Sep 2020 13:16:08 +0800</pubDate>
      
      <guid>http://korman.github.io/post/golang/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6go-micro%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A02/</guid>
      <description>承上启下 上一篇帖子简单介绍了go-micro的整体框架结构，这一篇主要写go-micro使用方式的例子，中间会穿插一些go-micro的源码，和调用流程图，帮大家更好的理解go-micro的底层。更详细更具体的调用流程和细节，会在以后的帖子里详细讲解。 例子的github地址： gomicrorpc 跑</description>
    </item>
    
    <item>
      <title>[转载]go微服务框架go-micro深度学习(一)</title>
      <link>http://korman.github.io/post/golang/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6go-micro%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A01/</link>
      <pubDate>Sat, 19 Sep 2020 13:16:04 +0800</pubDate>
      
      <guid>http://korman.github.io/post/golang/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6go-micro%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A01/</guid>
      <description>起因 产品嘴里的一个小项目，从立项到开发上线，随着时间和需求的不断激增，会越来越复杂，变成一个大项目，如果前期项目架构没设计的不好，代码会越来越臃肿，难以维护，后期的每次产品迭代上线都会牵一发而动全身。项目微服务化，松耦合模块间的关系，是一个很好的选择，随然增加了维护成本，但是还是</description>
    </item>
    
    <item>
      <title>[转载]Agones：一款基于Kubernetes的开源游戏服务器</title>
      <link>http://korman.github.io/post/golang/agones%E4%B8%80%E6%AC%BE%E5%9F%BA%E4%BA%8Ekubernetes%E7%9A%84%E5%BC%80%E6%BA%90%E6%B8%B8%E6%88%8F%E6%9C%8D%E5%8A%A1%E5%99%A8/</link>
      <pubDate>Fri, 18 Sep 2020 17:10:08 +0800</pubDate>
      
      <guid>http://korman.github.io/post/golang/agones%E4%B8%80%E6%AC%BE%E5%9F%BA%E4%BA%8Ekubernetes%E7%9A%84%E5%BC%80%E6%BA%90%E6%B8%B8%E6%88%8F%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid>
      <description>简介 在分布式系统领域，支持在线弹性扩展，实时多人专属游戏服务器意味着特殊的挑战。随着游戏专业人士创造的各种特殊方案，Kubernetes被整合成跨云和物理机，支持复杂工作流的开源分布式标准。今天，我们很高兴发布开源Agones[1]（希腊语“contest”或者“gatherin</description>
    </item>
    
    <item>
      <title>[转载]Linux下查看文件编码及修改编码</title>
      <link>http://korman.github.io/post/linux/linux%E4%B8%8B%E6%9F%A5%E7%9C%8B%E6%96%87%E4%BB%B6%E7%BC%96%E7%A0%81%E5%8F%8A%E4%BF%AE%E6%94%B9%E7%BC%96%E7%A0%81/</link>
      <pubDate>Fri, 18 Sep 2020 17:00:21 +0800</pubDate>
      
      <guid>http://korman.github.io/post/linux/linux%E4%B8%8B%E6%9F%A5%E7%9C%8B%E6%96%87%E4%BB%B6%E7%BC%96%E7%A0%81%E5%8F%8A%E4%BF%AE%E6%94%B9%E7%BC%96%E7%A0%81/</guid>
      <description>在Vim中可以直接查看文件编码 :set fileencoding 即可显示文件编码格式。 如果你只是想查看其它编码格式的文件或者想解决用Vim查看文件乱码的问题，那么你可以在~/.vimrc文件中添加一下内容: set encoding=utf-8 filenencodings=ucs-bom,utf-8,cp936 这样，就可以让vim自动识别文件编码(可以自动识别UTF-8或者GBK编码的文件),其实就是依照f</description>
    </item>
    
    <item>
      <title>[转载]使用micro创建微服务</title>
      <link>http://korman.github.io/post/golang/%E4%BD%BF%E7%94%A8micro%E5%88%9B%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Fri, 18 Sep 2020 09:20:37 +0800</pubDate>
      
      <guid>http://korman.github.io/post/golang/%E4%BD%BF%E7%94%A8micro%E5%88%9B%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1/</guid>
      <description>简介 micro是一个工具集，用来帮助开发者创建和管理微服务。它包括两部分： go-micro：它是一个go语言的微服务开发框架。 micro：它是一个命令行工具，这个工具是基于go-micro开发的。 另外go-plugins作为一组插件，在开发过程中也是必要的。通过插件，我们在服务发</description>
    </item>
    
    <item>
      <title>[转载]go-micro讲解--Go Micro编写微服务</title>
      <link>http://korman.github.io/post/golang/gomicro%E7%BC%96%E5%86%99%E5%BE%AE%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Fri, 18 Sep 2020 01:44:57 +0800</pubDate>
      
      <guid>http://korman.github.io/post/golang/gomicro%E7%BC%96%E5%86%99%E5%BE%AE%E6%9C%8D%E5%8A%A1/</guid>
      <description>安装protoc github上下载一个cpp包：https://github.com/google/protobuf/releases make make install安装即可 protoc-gen-go go get -u github.com/golang/protobuf/protoc-gen-go 安装protoc-gen-micro go get github.com/micro/protoc-gen-micro 安装Consul micro默认使用consul作为微服务发现 Consul is used as</description>
    </item>
    
  </channel>
</rss>